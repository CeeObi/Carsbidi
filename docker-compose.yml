networks:
  custom:
    ipam:
      config:
        - subnet: 10.5.0.0/16



services:
#start postgresdb service from docker repo
  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=passw0rd
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      custom:
  
  #start mongodb service from docker repos
  mongo:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=passw0rd
    ports:
      - 27017:27017
    volumes:
      - mongodata:/var/lib/mongodb/data
    networks:
      custom:
  
  #start rabbitmq service from docker repo
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      custom:

  #Building AuctionService from my local file location
  auction-svc:
    image: ceeobi/auction-svc:latest #We assign the image a name here
    build:
      context: .
      dockerfile: src/AuctionService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development 
      - ASPNETCORE_URLS=http://+:7777
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq #Assigns the 'rabbitmq' container, above in docker to 'Host in RabbitMq in Configfile'
      - ConnectionStrings__DefaultConnection=Server=postgres:5432;User Id=postgres;Password=passw0rd;Database=auctions #passw0rd!
      - IdentityServiceUrl=http://identity-svc
      - Kestrel__Endpoints__Grpc__Protocols=Http2
      - Kestrel__Endpoints__Grpc__Url=http://+:7777
      - Kestrel__Endpoints__WebApi__Protocols=Http1
      - Kestrel__Endpoints__WebApi__Url=http://+:80
    ports:
      - 7001:80
      - 7777:7777
    networks:
      custom:
    depends_on: #Services above
      - postgres
      - rabbitmq     

  #Building SearchService from my local file location
  search-svc:
    image: ceeobi/search-svc:latest 
    build:
      context: .
      dockerfile: src/SearchService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__MongoDbDefaultConnection=mongodb://root:passw0rd@mongo
      - IdentityServiceUrl=http://identity-svc
      - AuctionServiceUrl:http://auction-svc
    ports:
      - 7002:80
    networks:
      custom:
    depends_on:
      - mongo
      - rabbitmq 
      #- auction-svc => No need because resilence is already setup
  
  #Building IdentityService from my local file location
  identity-svc:
    image: ceeobi/identity-svc:latest
    build:
      context: .
      dockerfile: src/IdentityService/Dockerfile    
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=postgres:5432;User Id=postgres;Password=passw0rd;Database=identity
      - VIRTUAL_HOST=id.carsbidi.com
      - ClientApp=http://app.carsbidi.com
    # ports:
      # - 5000:80
      # - 80:80
      #
    deploy:
      resources:
        limits:
          memory: 8GB
        reservations:
          memory: 2GB
      #
    depends_on:
      - postgres
    networks:
      custom:
        ipv4_address: 10.5.0.200

  #Building GatewayService from my local file location
  gateway-svc:
    image: ceeobi/gateway-svc:latest 
    build:
      context: .
      dockerfile: src/GatewayService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ClientApp=https://app.carsbidi.com
      - VIRTUAL_HOST=api.carsbidi.com
    # ports:
    #   - 6001:80
    networks:
      custom:

  #Building BiddingService from my local file location
  bid-svc:
    image: ceeobi/bid-svc:latest 
    build:
      context: .
      dockerfile: src/BiddingService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__BidDbConnection=mongodb://root:passw0rd@mongo
      - IdentityServiceUrl=http://identity-svc
      - GrpcAuction:http://host.docker.internal:7777
    ports:
      - 7003:80
    networks:
      custom:
    depends_on:
      - mongo
      - rabbitmq 
  
  #Building NotifyService from my local file location
  notify-svc:
    image: ceeobi/notify-svc:latest 
    build:
      context: .
      dockerfile: src/NotificationService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
    ports:
      - 7004:80
    networks:
      custom:
    depends_on:
      - rabbitmq 

  #Building Nextjs WebApp from the local file location
  web-app:
    image: ceeobi/carsbidi-web-app:latest
    build: 
      context: .
      dockerfile: frontend/web-app/Dockerfile
    volumes:
      - nxtwebdata:/var/lib/web/data
    # ports:
    #   - 3000:3000
    extra_hosts:
      - id.carsbidi.com:10.5.0.200
    environment:
      - NEXTAUTH_SECRET=e85d99a51f44c3c0e67332b0f6d555189fc8d4cfd330ad992af9776ec2d37418
      - NEXTAUTH_URL=http://app.carsbidi.com
      - NEXTAUTH_URL_INTERNAL=http://web-app:3000
      - API_URL=http://gateway-svc/
      - ID_URL=http://id.carsbidi.com
      - ID_REDIRECT_URL=http://app.carsbidi.com/api/auth/callback/id-server
      # - ID_URL=http://identity-svc/
      - NEXT_PUBLIC_NOTIFY_URL=http://gateway-svc/notifications
      - VIRTUAL_HOST=app.carsbidi.com
      - VIRTUAL_PORT=3000
    networks:
      custom:

  #Building NGINX proxy from online registry
  nginx-proxy:
    image: nginxproxy/nginx-proxy:1.4
    ports:
      - 80:80
      - 443:443
    networks:
      custom:
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./devcerts:/etc/nginx/certs 

#Volumes
volumes:
  pgdata:
  mongodata:
  nxtwebdata:
      